{
	"variables": [],
	"info": {
		"name": "Expense Tracker API tests",
		"_postman_id": "e1dc204a-704c-2a4f-c034-a36fbda5af8a",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Register new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 201 - Created\"] = responseCode.code === 201;",
							"tests[\"Content-Type header is present and value is 'text/plain; charset=utf-8'\"] = postman.getResponseHeader(\"Content-Type\") == \"text/plain; charset=utf-8\";",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"FirstName\": \"Grzegorz\",\n\t\"LastName\": \"Karlik\",\n\t\"Login\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test\",\n\t\"Pin\": \"1111\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Register existing user",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 409 - Conflict\"] = responseCode.code === 409;",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"FirstName\": \"Grzegorz\",\n\t\"LastName\": \"Karlik\",\n\t\"Login\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test\",\n\t\"Pin\": \"1111\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Register user - invalid payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 400 - Bad Request\"] = responseCode.code === 400;",
							"tests[\"Content-Type header is present and value is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") == \"application/json\";",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// validate response",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Error code is 1002\"] = jsonData.code === 1002;",
							"tests[\"Error message is Invalid request data\"] = jsonData.message === \"Invalid request data\";"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"FirstName\": \"Grzegorz\",\n\t\"LastName\": \"Karlik\",\n\t\"Login\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test\",\n\t\"Pin\": \"1111\",\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Register user - invalid user data",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 400 - Bad Request\"] = responseCode.code === 400;",
							"tests[\"Content-Type header is present and value is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") == \"application/json\";",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// validate response",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Error code is 1002\"] = jsonData.code === 1008;",
							"tests[\"Error message is Invalid request data\"] = jsonData.message === \"Invalid user model\";"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"Test\": \"test\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Authenticate user - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 200 - OK\"] = responseCode.code === 200;",
							"tests[\"Content-Type header is present and value is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") == \"application/json\";",
							"tests[\"Body contains token string\"] = responseBody.has(\"token\");",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// set token as global variable",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"authentication-token\", \"bearer \" + jsonData.token);"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/auth",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"Username\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Authenticate user - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 401 - Unauthorized\"] = responseCode.code === 401;",
							"tests[\"Content-Type header is present and value is 'text/plain; charset=utf-8'\"] = postman.getResponseHeader(\"Content-Type\") == \"text/plain; charset=utf-8\";",
							"tests[\"Body contains Unauthorized\"] = responseBody.has(\"Unauthorized\");",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/auth",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"Username\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test123\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Find user by login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 200 - OK\"] = responseCode.code === 200;",
							"tests[\"Content-Type header is present and value is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") == \"application/json\";",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// validate response",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"FirstName is Grzegorz\"] = jsonData.FirstName === \"Grzegorz\";",
							"tests[\"LastName is Karlik\"] = jsonData.LastName === \"Karlik\";",
							"tests[\"Login is grzegorz.karlik@gmail.com\"] = jsonData.Login === \"grzegorz.karlik@gmail.com\";",
							"",
							"// set user-id as environment variable",
							"postman.setEnvironmentVariable(\"user-id\", jsonData.ID);"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users?l=grzegorz.karlik@gmail.com",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authentication-token}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 200 - OK\"] = responseCode.code === 200;",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// validate response",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"FirstName is Grzegorz\"] = jsonData.FirstName === \"Grzegorz\";",
							"tests[\"LastName is Karlik\"] = jsonData.LastName === \"Karlik2\";",
							"tests[\"Login is grzegorz.karlik@gmail.com\"] = jsonData.Login === \"grzegorz.karlik@gmail.com\";"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"ID\": \"{{user-id}}\",\n\t\"FirstName\": \"Grzegorz\",\n\t\"LastName\": \"Karlik2\",\n\t\"Login\": \"grzegorz.karlik@gmail.com\",\n\t\"Password\": \"test\",\n\t\"Pin\": \"1111\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Find user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Response code should be 200 - OK\"] = responseCode.code === 200;",
							"tests[\"Content-Type header is present and value is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") == \"application/json\";",
							"",
							"response_time = postman.getEnvironmentVariable(\"response_time_limit\")",
							"tests[\"Response time is less than \" + response_time + \"ms\"] = responseTime <= response_time;",
							"",
							"// validate response",
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Firstname is Grzegorz\"] = jsonData.FirstName === \"Grzegorz\";",
							"tests[\"Lastname is Karlik2\"] = jsonData.LastName === \"Karlik2\";",
							"tests[\"Login is grzegorz.karlik@gmail.com\"] = jsonData.Login === \"grzegorz.karlik@gmail.com\";"
						]
					}
				}
			],
			"request": {
				"url": "http://{{host}}:{{port}}/api/v1/users/{{user-id}}",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authentication-token}}",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		}
	]
}